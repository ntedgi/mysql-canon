{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {connectAndQuery, executeTransaction} from './mysql';\n\nimport {getRandomInt, invokeAsyncFunctionTimes, writeLogToFile} from './utils';\n\nimport {eventEmitter} from './event-handler';\nconst throat = require('throat')(10);\n\nfunction generateInsertValues<T extends Record<string, any>>(data: T[]): string {\n    return data.map(row => {\n        const values = Object.values(row).map(value => {\n            if (typeof value === 'string') {\n                return `'${value.replace(/'/g, \"''\")}'`; // Escape single quotes in strings\n            } else if (value === null || value === undefined) {\n                return 'NULL';\n            }\n            return value;\n        });\n        return `(${values.join(', ')})`;\n    }).join(', ');\n}\n\nasync function updateAssets() {\n    try {\n        const startTime = Date.now();\n        const query = `UPDATE main.assets\nSET duration = duration * 1.01\nWHERE mobile_application_id in (560385, 710389, 560385,681203,409067,4184,583967,582489,493979,643674)`;\n        const res = await connectAndQuery(query, 'main', 'write');\n        eventEmitter.emit('success', {type: 'updateAssets', time: Date.now()-startTime});\n        writeLogToFile('done update assets');\n    } catch (e) {\n        writeLogToFile('got exception updateAssets');\n    }\n}\n\nconst randomNumbers = [] as any[];\n\nasync function updateBids() {\n    try {\n        const values = [];\n        let randomVal = getRandomInt(0, 2000000000000);\n        randomNumbers.push(randomVal);\n        while (randomNumbers.includes(randomVal)) {\n            randomVal = getRandomInt(0, 2000000000000);\n        }\n        randomNumbers.push(randomVal);\n\n        for (let i = 0; i < 1000; i++) {\n            values.push([randomVal, 'US', 1234, '0.001']);\n        }\n\n        const insertValues = generateInsertValues(values);\n\n        const startTime = Date.now();\n        const insertQuery = `insert into openx.ox_campaign_multiple_bid (campaign_id, country_code, app_id, revenue) values ${insertValues} on duplicate key update revenue = revenue`;\n        await Promise.all([\n            connectAndQuery(insertQuery, 'openx','write'),\n        ]);\n        eventEmitter.emit('success', {type: 'updateBids', time: Date.now()-startTime});\n        writeLogToFile('done update bids');\n    } catch (e) {\n        writeLogToFile('got exception on updateBids');\n    }\n}\n\nasync function selectCampaign() {\n    try {\n        const startTime = Date.now();\n        const query = `select * from openx.ox_campaigns where mobile_app_id=4184`;\n        await connectAndQuery(query, 'openx', 'read');\n        eventEmitter.emit('success', {type: 'selectCampaign', time: Date.now()-startTime});\n        writeLogToFile('done select campaigns');\n    } catch (e) {\n        writeLogToFile('got exception on selectCampaign');\n    }\n}\n\nasync function selectCampaigns() {\n    try {\n        const startTime = Date.now();\n        const query = 'select * from openx.ox_campaigns where network_id = 1446 and campaign_type=33 limit 10';\n        await connectAndQuery(query, 'openx', 'read');\n        eventEmitter.emit('success', {type: 'selectCampaigns', time: Date.now()-startTime});\n        writeLogToFile('done select campaigns');\n    } catch (e) {\n        writeLogToFile('got exception on selectCampaign');\n    }\n}\n\nasync function insertCampaigns() {\n    try {\n        const startTime = Date.now();\n        const campaignInsertQuery = `insert into openx.ox_campaigns (network_id, campaign_type, mobile_app_id, origin, campaignname, suspended) values (1446,33,162091,5,'test',0)`;\n        const bannerInsertQuery = `insert into openx.ox_banners (campaignid, url, impression_url) values ('@campaignId','test_url','test_url')`;\n\n        const queries = [\n            campaignInsertQuery,\n            `SET @campaignId = LAST_INSERT_ID()`,\n            bannerInsertQuery\n        ];\n\n        const res = await executeTransaction(queries, 'openx');\n        eventEmitter.emit('success', {type: 'insertCampaigns', time: Date.now()-startTime});\n        writeLogToFile('done insert campaign');\n    } catch (e) {\n        writeLogToFile('got exception on insertCampaigns');\n        console.log(e)\n    }\n}\n\nfunction sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n(async () => {\n    eventEmitter.emit('start');\n    setInterval(() => {\n        eventEmitter.emit('log');\n        \n    },5000)\n    for (let i = 0; i < 7; i++) {\n        const promiseArr=[\n            ...invokeAsyncFunctionTimes(insertCampaigns, 50),\n            ...invokeAsyncFunctionTimes(selectCampaigns, 20),\n            ...invokeAsyncFunctionTimes(selectCampaign, 60),\n            ...invokeAsyncFunctionTimes(updateBids, 60),\n            ...invokeAsyncFunctionTimes(updateAssets, 60)\n        ].map(fn=>throat(fn));\n        await Promise.all(promiseArr);\n        writeLogToFile(`done ${i} iteration`);\n        console.log(`done ${i} iteration`);\n        if(i===0) {\n            eventEmitter.emit('clear_warmup');\n            await sleep(5000);\n        }\n        await sleep(1000);\n    }\n    eventEmitter.emit('end');\n})();\n"],"names":["throat","require","generateInsertValues","data","map","row","values","Object","value","replace","undefined","join","updateAssets","startTime","Date","now","query","res","connectAndQuery","eventEmitter","emit","type","time","writeLogToFile","e","randomNumbers","updateBids","randomVal","getRandomInt","push","includes","i","insertValues","insertQuery","Promise","all","selectCampaign","selectCampaigns","insertCampaigns","campaignInsertQuery","bannerInsertQuery","queries","executeTransaction","console","log","sleep","ms","resolve","setTimeout","setInterval","promiseArr","invokeAsyncFunctionTimes","fn"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}