{"version":3,"sources":["../src/mysql.ts"],"sourcesContent":["import mysql from \"mysql2/promise\";\nimport { writeLogToFile } from \"./utils\";\nimport { eventEmitter } from \"./event-handler\";\n\nconst process = require(\"process\");\n\nconst dbs = {\n  eu: {\n    row: \"dev-binlog-row-bar-jacob-instance.cro7ngosdr6q.eu-west-1.rds.amazonaws.com\",\n    mixed: \"\"\n  },\n  us: {\n    row: \"dev-binlog-row-bar-jacob-demand-us-instance.c488z2dafhwr.us-east-1.rds.amazonaws.com\",\n    mixed: \"\"\n  }\n};\n\nconst dbsRegion = process?.argv[2] === \"eu\" ? dbs.eu : dbs.us;\n\nconst connectionString = {\n  host: process?.argv[3] === \"row\" ? dbsRegion.row : dbsRegion.mixed,\n  user: \"app\",\n  password: \"g@nDur@$\",\n  connectTimeout: 30000,\n  waitForConnections: true\n};\nconst mainPool = mysql.createPool({ ...connectionString, connectionLimit: 5, database: \"main\" });\nconst writeOpenXPool = mysql.createPool({ ...connectionString, connectionLimit: 5, database: \"openx\" });\nconst readOpenXPool = mysql.createPool({ ...connectionString, connectionLimit: 5, database: \"openx\" });\n\nconsole.log(\"connectionString:\", connectionString);\n\nconst newConnectionHandler = (connection: mysql.PoolConnection, mode: string) => {\n  if (process?.argv[2] === \"us\" && mode === \"write\") {\n    console.log(\"set aurora_replica_read_consistency to openXPool connection created\");\n    connection.query(\"SET aurora_replica_read_consistency = 'session'\");\n  }\n  console.log(\"openXPool connection created\");\n  connection.on(\"error\", (err: any) => {\n    console.error(\"openXPool connection error:\", err);\n  });\n};\n\nwriteOpenXPool.on(\"connection\", (connection) => {\n  newConnectionHandler(connection, \"write\");\n});\n\nreadOpenXPool.on(\"connection\", (connection) => {\n  newConnectionHandler(connection, \"read\");\n});\n\n\nmainPool.on(\"connection\", (connection) => {\n  newConnectionHandler(connection, \"write\");\n});\n\n\nexport async function connectAndQuery(query: any, database = \"main\", mode: string) {\n  const connection = await getConnection(database,mode);\n\n  try {\n    await connection.execute(query);\n\n    // Close the connection\n    releaseConnection(connection, database, mode);\n    // return response;\n  } catch (error) {\n    eventEmitter.emit(\"error\");\n    console.error(\"error:\", error);\n    writeLogToFile(`Mysql connectAndQuery Error occurred:, ${error}`);\n    releaseConnection(connection, database, mode);\n\n  }\n}\n\n// Function to get a new database connection\nasync function getConnection(database: any, mode: string) {\n  return (database === \"main\") ? mainPool.getConnection() : mode == \"write\" ? writeOpenXPool.getConnection() : readOpenXPool.getConnection();\n}\n\nfunction releaseConnection(conn, database, mode: string) {\n  return (database === \"main\") ? mainPool.releaseConnection(conn) : mode == \"write\" ? writeOpenXPool.releaseConnection(conn) : readOpenXPool.releaseConnection(conn);\n}\n\n// Function to start a transaction\nasync function startTransaction(conn: mysql.Connection) {\n  await conn.beginTransaction();\n}\n\n// Function to execute a query within a transaction\nasync function executeTransactionQuery(conn: mysql.Connection, query: string, params: any[] = []) {\n  const [rows] = await conn.execute(query);\n  return rows;\n}\n\n// Function to commit a transaction\nasync function commitTransaction(conn: mysql.Connection) {\n  await conn.commit();\n}\n\n// Function to rollback a transaction\nasync function rollbackTransaction(conn: mysql.Connection) {\n  await conn.rollback();\n}\n\n// Exported function to handle a transaction\nexport async function executeTransaction(queries: any, database = \"main\") {\n  const conn = await getConnection(database, \"write\");\n  try {\n    // if (process?.argv[2] === \"us\") {\n    //   await conn.execute(`SET aurora_replica_read_consistency = ''`);\n    // }\n    await startTransaction(conn);\n\n    const results = [];\n    for (const query of queries) {\n      const result = await executeTransactionQuery(conn, query);\n      results.push(result);\n    }\n    await commitTransaction(conn);\n    return results;\n  } catch (error) {\n    eventEmitter.emit(\"error\");\n    console.error(\"error::\", error);\n    await rollbackTransaction(conn);\n    throw error;\n  } finally {\n    releaseConnection(conn, database,\"write\");\n  }\n}"],"names":["connectAndQuery","executeTransaction","process","require","dbs","eu","row","mixed","us","dbsRegion","argv","connectionString","host","user","password","connectTimeout","waitForConnections","mainPool","mysql","createPool","connectionLimit","database","writeOpenXPool","readOpenXPool","console","log","newConnectionHandler","connection","mode","query","on","err","error","getConnection","execute","releaseConnection","eventEmitter","emit","writeLogToFile","conn","startTransaction","beginTransaction","executeTransactionQuery","params","rows","commitTransaction","commit","rollbackTransaction","rollback","queries","results","result","push"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}